{"ast":null,"code":"var _jsxFileName = \"/Users/santanamu/Desktop/pos-git/src/ContactManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useTable } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyTable() {\n  _s();\n  const data = React.useMemo(() => [{\n    col1: 'Hello',\n    col2: 'World'\n  }, {\n    col1: 'react-table',\n    col2: 'rocks'\n  }, {\n    col1: 'whatever',\n    col2: 'you want'\n  }], []);\n  const columns = React.useMemo(() => [{\n    Header: 'Column 1',\n    accessor: 'col1' // accessor is the \"key\" in the data\n  }, {\n    Header: 'Column 2',\n    accessor: 'col2'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n  const [selectedRowData, setSelectedRowData] = useState([]);\n  const getSelectedRowwValues = selectedRow => {\n    setSelectedRowData({\n      ...selectedRow.values\n    });\n    console.log({\n      ...selectedRow.values\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      style: {\n        border: 'solid 1px blue'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(),\n            style: {\n              borderBottom: 'solid 3px red',\n              background: 'aliceblue',\n              color: 'black',\n              fontWeight: 'bold'\n            },\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            onClick: () => getSelectedRowwValues(row),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                ...cell.getCellProps(),\n                style: {\n                  padding: '10px',\n                  border: 'solid 1px gray',\n                  background: 'papayawhip'\n                },\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: [\"Selected row: \", JSON.stringify(selectedRowData, null, 2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(MyTable, \"RfJxsjBfPbX7/Wt9p9nJegoL+4A=\", false, function () {\n  return [useTable];\n});\n_c = MyTable;\nvar _c;\n$RefreshReg$(_c, \"MyTable\");","map":{"version":3,"names":["React","useState","useTable","MyTable","data","useMemo","col1","col2","columns","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedRowData","setSelectedRowData","getSelectedRowwValues","selectedRow","values","console","log","border","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","borderBottom","background","color","fontWeight","render","row","getRowProps","cells","cell","getCellProps","padding","JSON","stringify"],"sources":["/Users/santanamu/Desktop/pos-git/src/ContactManager.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { useTable } from 'react-table';\n\nexport default function MyTable() {\n  const data = React.useMemo(\n    () => [\n      {\n        col1: 'Hello',\n        col2: 'World'\n      },\n      {\n        col1: 'react-table',\n        col2: 'rocks'\n      },\n      {\n        col1: 'whatever',\n        col2: 'you want'\n      }\n    ],\n    []\n  );\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1' // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2'\n      }\n    ],\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({ columns, data });\n\n  const [selectedRowData, setSelectedRowData] = useState([]);\n\n  const getSelectedRowwValues = selectedRow => {\n    setSelectedRowData({ ...selectedRow.values });\n    console.log({ ...selectedRow.values })\n  };\n\n  return (\n    <div>\n      <table {...getTableProps()} style={{ border: 'solid 1px blue' }}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th\n                  {...column.getHeaderProps()}\n                  style={{\n                    borderBottom: 'solid 3px red',\n                    background: 'aliceblue',\n                    color: 'black',\n                    fontWeight: 'bold'\n                  }}\n                >\n                  {column.render('Header')}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <tr\n                {...row.getRowProps()}\n                onClick={() => getSelectedRowwValues(row)}\n              >\n                {row.cells.map(cell => {\n                  return (\n                    <td\n                      {...cell.getCellProps()}\n                      style={{\n                        padding: '10px',\n                        border: 'solid 1px gray',\n                        background: 'papayawhip'\n                      }}\n                    >\n                      {cell.render('Cell')}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      <pre>Selected row: {JSON.stringify(selectedRowData, null, 2)}</pre>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}